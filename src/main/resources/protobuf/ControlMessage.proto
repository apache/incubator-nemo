syntax = "proto2";

package protobuf;

option java_package = "edu.snu.vortex.runtime.common.comm";
option java_outer_classname = "ControlMessage";

enum MessageType {
    TaskGroupStateChanged = 0;
    ScheduleTaskGroup = 1;
    PartitionStateChanged = 2;
    RequestPartitionLocation = 3;
    PartitionLocationInfo = 4;
    ExecutorFailed = 5;
    MetricMessageReceived = 6;
    // Messages for metadata passing
    StoreMetadata = 7;
    RemoveMetadata = 8;
    RequestMetadata = 9;
    MetadataResponse = 10;
}

message Message {
    required MessageType type = 1;
    required int64 id = 2;
    optional TaskGroupStateChangedMsg taskStateChangedMsg = 3;
    optional ScheduleTaskGroupMsg scheduleTaskGroupMsg = 4;
    optional PartitionStateChangedMsg partitionStateChangedMsg = 5;
    optional RequestPartitionLocationMsg requestPartitionLocationMsg = 6;
    optional PartitionLocationInfoMsg partitionLocationInfoMsg = 7;
    optional ExecutorFailedMsg executorFailedMsg = 8;
    optional MetricMsg metricMsg = 9;
    // Messages for metadata passing
    optional MetadataResponseMsg metadataResponseMsg = 10;
    optional StoreMetadataMsg storeMetadataMsg = 11;
    optional RemoveMetadataMsg removeMetadataMsg = 12;
    optional RequestMetadataMsg requestMetadataMsg = 13;
}

// Messages from Master to Executors
message ScheduleTaskGroupMsg {
    required bytes taskGroup = 1;
}

message PartitionLocationInfoMsg {
    required int64 requestId = 1; // To find the matching request msg
    required string partitionId = 2;
    optional PartitionStateFromExecutor state = 3;
    optional string ownerExecutorId = 4;
}

// Messages from Executors to Master
message TaskGroupStateChangedMsg {
    required string executorId = 1;
    required string taskGroupId = 2;
    required TaskGroupStateFromExecutor state = 3;
    repeated string tasksPutOnHoldIds = 4;
    optional RecoverableFailureCause failureCause = 5;
    required int32 attemptIdx = 6;
}

enum RecoverableFailureCause {
    InputReadFailure = 0;
    OutputWriteFailure = 1;
    // There is a 3rd cause: container_failure, but this is ommitted here as it is never propagated with a control msg.
}

message PartitionStateChangedMsg {
    required string executorId = 1;
    required string partitionId = 2;
    required PartitionStateFromExecutor state = 3;
    repeated int64 blockSizeInfo = 4;
    optional string srcVertexId = 5;
}

message RequestPartitionLocationMsg {
    required string executorId = 1;
    required string partitionId = 2;
}

message ExecutorFailedMsg {
    required string executorId = 1;
    required bytes exception = 2;
}

message MetricMsg {
    required string executorId = 1;
    repeated string messages = 2;
}

// Messages between Executors
message RequestPartitionMsg {
    required int64 requestId = 1; // To handle multiple outstanding requests on one link between PartitionTransferPeers
    required string partitionId = 2;
    required PartitionStore partitionStore = 3;
    required string runtimeEdgeId = 4;
    optional int32 hashRangeStartVal = 5; // Inclusive
    optional int32 hashRangeEndVal = 6; // Exclusive
}

enum TaskGroupStateFromExecutor {
    READY = 0;
    EXECUTING = 1;
    COMPLETE = 2;
    FAILED_RECOVERABLE = 3;
    FAILED_UNRECOVERABLE = 4;
    ON_HOLD = 5;
}

enum PartitionStateFromExecutor {
    PARTITION_READY = 0;
    SCHEDULED = 1;
    COMMITTED = 2;
    LOST = 3;
    LOST_BEFORE_COMMIT = 4;
    REMOVED = 5;
}

enum PartitionStore {
    MEMORY = 0;
    LOCAL_FILE = 1;
    REMOTE_FILE = 2;
}

// Messages for metadata passing
// Messages from Master to Executors
message MetadataResponseMsg {
    required int64 requestId = 1; // To find the matching request msg
    optional bool hashed = 2;
    repeated BlockMetadataMsg blockMetadata = 3;
    optional PartitionStateFromExecutor state = 4;
}

// Messages from Executors to Master
message StoreMetadataMsg {
    required bool hashed = 1;
    required string partitionId = 2;
    repeated BlockMetadataMsg blockMetadata = 3;
}

message RemoveMetadataMsg {
    required string partitionId = 1;
}

message RequestMetadataMsg {
    required string executorId = 1;
    required string partitionId = 2;
}

// Common messages
message BlockMetadataMsg {
    required int32 hashValue = 1;
    required int32 blockSize = 2;
    required int64 offset = 3;
    required int64 numElements = 4;
}