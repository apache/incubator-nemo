syntax = "proto3";

package protobuf;

option java_package = "edu.snu.vortex.runtime.common.comm";
option java_outer_classname = "ControlMessage";

enum MessageType {
    TaskGroupStateChanged = 0;
    ScheduleTaskGroup = 1;
    BlockStateChanged = 2;
    RequestBlockLocation = 3;
    BlockLocationInfo = 4;
    RequestBlock = 5;
    TransferBlock = 6;
    BroadcastPhysicalPlan = 7;
}

message Message {
    MessageType type = 1;
    int64 id = 2;
    oneof messageTypes {
        TaskGroupStateChangedMsg taskStateChangedMsg = 3;
        ScheduleTaskGroupMsg scheduleTaskGroupMsg = 4;
        BlockStateChangedMsg blockStateChangedMsg = 5;
        RequestBlockLocationMsg requestBlockLocationMsg = 6;
        BlockLocationInfoMsg blockLocationInfoMsg = 7;
        RequestBlockMsg requestBlockMsg = 8;
        TransferBlockMsg transferBlockMsg = 9;
        BroadcastPhysicalPlanMsg broadcastPhysicalPlanMsg = 10;
    }
}

// Messages from Master to Executors
message ScheduleTaskGroupMsg {
    bytes taskGroup = 1;
}

message BlockLocationInfoMsg {
    string blockId = 1;
    string ownerExecutorId = 2;
}

message BroadcastPhysicalPlanMsg {
    bytes physicalPlan = 1;
}

// Messages from Executors to Master
message TaskGroupStateChangedMsg {
    string executorId = 1;
    string taskGroupId = 2;
    TaskGroupStateFromExecutor state = 3;
    repeated string failedTaskIds = 4;
}

message BlockStateChangedMsg {
    string executorId = 1;
    string blockId = 2;
    BlockStateFromExecutor state = 3;
}

message RequestBlockLocationMsg {
    string executorId = 1;
    string blockId = 2;
}

// Messages between Executors
message RequestBlockMsg {
    string executorId = 1;
    string blockId = 2;
    BlockStore blockStore = 3;
}

message TransferBlockMsg {
    string executorId = 1;
    string blockId = 2;
    bytes data = 3; // just for now
    // TODO #18: Support code/data serialization
    bool isUnionValue = 4; // just for now
}

enum TaskGroupStateFromExecutor {
    READY = 0;
    EXECUTING = 1;
    COMPLETE = 2;
    FAILED_RECOVERABLE = 3;
    FAILED_UNRECOVERABLE = 4;
}

enum BlockStateFromExecutor {
    BLOCK_READY = 0;
    MOVING = 1;
    COMMITTED = 2;
    LOST = 3;
}

enum BlockStore {
    LOCAL = 0;
    MEMORY = 1;
    FILE = 2;
    MEMORY_FILE = 3;
    DISTRIBUTED_STORAGE = 4;
}