syntax = "proto2";

package protobuf;

option java_package = "edu.snu.vortex.runtime.common.comm";
option java_outer_classname = "ControlMessage";

enum MessageType {
    TaskGroupStateChanged = 0;
    ScheduleTaskGroup = 1;
    BlockStateChanged = 2;
    RequestBlockLocation = 3;
    BlockLocationInfo = 4;
}

message Message {
    required MessageType type = 1;
    required int64 id = 2;
    optional TaskGroupStateChangedMsg taskStateChangedMsg = 3;
    optional ScheduleTaskGroupMsg scheduleTaskGroupMsg = 4;
    optional BlockStateChangedMsg blockStateChangedMsg = 5;
    optional RequestBlockLocationMsg requestBlockLocationMsg = 6;
    optional BlockLocationInfoMsg blockLocationInfoMsg = 7;
}

// Messages from Master to Executors
message ScheduleTaskGroupMsg {
    required bytes taskGroup = 1;
}

message BlockLocationInfoMsg {
    required int64 requestId = 1; // To find the matching request msg
    required string blockId = 2;
    required string ownerExecutorId = 3;
}

// Messages from Executors to Master
message TaskGroupStateChangedMsg {
    required string executorId = 1;
    required string taskGroupId = 2;
    required TaskGroupStateFromExecutor state = 3;
    repeated string failedTaskIds = 4;
}

message BlockStateChangedMsg {
    required string executorId = 1;
    required string blockId = 2;
    required BlockStateFromExecutor state = 3;
}

message RequestBlockLocationMsg {
    required string executorId = 1;
    required string blockId = 2;
}

// Messages between Executors
message RequestBlockMsg {
    required int64 requestId = 1; // To handle multiple outstanding requests on one link between BlockTransferPeers
    required string blockId = 2;
    required BlockStore blockStore = 3;
    required string runtimeEdgeId = 4;
}

message BlockTransferMsg {
    required int64 requestId = 1; // Should be equal to requestId of the corresponding RequestBlockMsg
    repeated bytes data = 2;
}

enum TaskGroupStateFromExecutor {
    READY = 0;
    EXECUTING = 1;
    COMPLETE = 2;
    FAILED_RECOVERABLE = 3;
    FAILED_UNRECOVERABLE = 4;
}

enum BlockStateFromExecutor {
    BLOCK_READY = 0;
    MOVING = 1;
    COMMITTED = 2;
    LOST = 3;
    REMOVED = 4;
}

enum BlockStore {
    LOCAL = 0;
    MEMORY = 1;
    FILE = 2;
    MEMORY_FILE = 3;
    DISTRIBUTED_STORAGE = 4;
}
